using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Text;
using System.Threading;
using System.Linq;

namespace ConsoleApp1
{
    public class EComponent
    {
        private readonly ConcurrentDictionary<string, EventWaitHandle> _processing;

        public EComponent()
        {
            _processing = new ConcurrentDictionary<string, EventWaitHandle>();
        }
        private string CreateLogMessage(string message, params object[] parameters)
        {
            var logMessage = new StringBuilder();

            logMessage.Append($"{Thread.CurrentThread.ManagedThreadId}{_delimiter}");

            if (!string.IsNullOrEmpty(message))
            {
                logMessage.Append($"{message}{_delimiter}");
            }

            if (parameters?.Length > 0)
            {
                foreach (var parameter in parameters)
                {
                    if (parameter != null)
                    {
                        if (IsClassType(parameter))
                        {
                            var jsonSerializerSettings = new JsonSerializerSettings() { ReferenceLoopHandling = ReferenceLoopHandling.Ignore };

                            var data = JsonConvert.SerializeObject(parameter, Formatting.None, jsonSerializerSettings);

                            logMessage.Append($"{data}{_delimiter}");
                        }
                        else
                        {
                            logMessage.Append($"{parameter}{_delimiter}");
                        }
                    }
                }
            }

            return logMessage.ToString();
        }

        private static bool IsClassType(object @object)
        {
            Type type = @object.GetType();

            return !type.IsValueType && type != typeof(string);
        
        public void Process(string id)
        {

            var handle = new EventWaitHandle(false, EventResetMode.AutoReset);
            var isFirst = _processing.TryAdd(id, handle);

            
            Console.WriteLine($"executing-->{isFirst}" + Thread.CurrentThread.ManagedThreadId);
            if (isFirst)
            {
                //execute logic
                Thread.Sleep(TimeSpan.FromSeconds(10));
                Console.WriteLine("executed" + Thread.CurrentThread.ManagedThreadId);

                handle.Set();
                _processing.TryRemove(id, out _);
            }
            else
            {
                if (_processing.TryGetValue(id, out handle))
                {

                    if (handle.WaitOne(TimeSpan.FromMinutes(3)))
                    {

                        //execute logic
                        Console.WriteLine("executed on WAItOne" + Thread.CurrentThread.ManagedThreadId);
                        Thread.Sleep(TimeSpan.FromSeconds(4));

                        handle.Set();
                        _processing.TryRemove(id, out _);

                    }
                    else
                    {
                        Console.WriteLine("Timeout reached");
                        // Timeout reached
                    }


                }
            }


        }
    }
}
